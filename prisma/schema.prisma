// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// https://authjs.dev/reference/adapter/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // @relation userId in Account references the User [id]
  // onDelete: Cascade: When user deleted all account references are deleted
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // @relation(userId) in Session references the User[id]
  // onDelete: Cascade - When a user is deleted, all related Session references are also deleted.
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // User model, one-to-many relationship with the Account model. 
  accounts Account[]
  // User model, one-to-many relationship with the Session model.
  sessions Session[]
  // User model, one-to-many relationship with the Post model.
  Post     Post[]
  // User model, one-to-many relationship with the Comment model.
  Comment  Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  // Topic model, one-to-many relationship with the Post model.
  Post        Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  userId  String
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @relation(userId) in Post references the User[id]
  // onDelete: Cascade - When a user is deleted, all related Post references are also deleted.
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @relation(topicId) in Post references the Topic[id]
  topic   Topic     @relation(fields: [topicId], references: [id])
  // Post model, one-to-many relationship with the Post model.
  // Comment[] @relation(fields: [/* field name */], references: [/* field name */])
  Comment Comment[]
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  postId   String
  userId   String
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

// Implement Later ...
model Score {
  id   String @id @default(cuid())
  name String
}
